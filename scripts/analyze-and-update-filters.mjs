// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –ø—Ä–æ–º–ø—Ç–∞–º
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
const filterKeywords = {
  'Code Generation': [
    'code', 'generate', 'create', 'build', 'function', 'class', 'script', 'programming', 
    'development', 'coding', 'algorithm', 'implementation', 'write code', '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞',
    '—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'javascript', 'python', 'react',
    'html', 'css', 'typescript', 'node', 'api', 'component', 'library', 'framework'
  ],
  
  'Code Review': [
    'review', 'analyze', 'check', 'audit', 'inspect', 'optimize', 'improve', 'refactor',
    'quality', 'best practices', 'security', 'performance', '–æ–±–∑–æ—Ä –∫–æ–¥–∞', '–∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞',
    '–ø—Ä–æ–≤–µ—Ä–∫–∞', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '—É–ª—É—á—à–µ–Ω–∏–µ', '—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥', '–∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞', '–æ—à–∏–±–∫–∏'
  ],
  
  'Debugging': [
    'debug', 'fix', 'error', 'bug', 'troubleshoot', 'solve', 'problem', 'issue',
    'exception', 'crash', 'failure', '–æ—Ç–ª–∞–¥–∫–∞', '–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–æ—à–∏–±–∫–∞', '–±–∞–≥',
    '–ø—Ä–æ–±–ª–µ–º–∞', '—Ä–µ—à–µ–Ω–∏–µ', '—Å–±–æ–π', '–∏—Å–∫–ª—é—á–µ–Ω–∏–µ', 'crash', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'
  ],
  
  'Content Creation': [
    'write', 'create', 'content', 'article', 'blog', 'post', 'story', 'text',
    'copywriting', 'marketing', 'social media', 'email', 'newsletter', 'description',
    '—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '–Ω–∞–ø–∏—Å–∞–Ω–∏–µ', '—Å—Ç–∞—Ç—å—è', '–±–ª–æ–≥', '–ø–æ—Å—Ç', '—Ç–µ–∫—Å—Ç', '–∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥',
    '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '—Å–æ—Ü—Å–µ—Ç–∏', '–æ–ø–∏—Å–∞–Ω–∏–µ', '—Ä–µ–∫–ª–∞–º–∞', '–ø–∏—Å—å–º–æ'
  ],
  
  'Teaching': [
    'explain', 'teach', 'learn', 'tutorial', 'guide', 'education', 'training',
    'course', 'lesson', 'instruction', 'help', 'how to', 'step by step',
    '–æ–±—É—á–µ–Ω–∏–µ', '–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ', '—É—Ä–æ–∫', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '–ø–æ–º–æ—â—å',
    '–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å', '–ø–æ—à–∞–≥–æ–≤–æ', '—Ç—É—Ç–æ—Ä–∏–∞–ª', '–≥–∞–π–¥', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'
  ]
}

async function analyzeAndUpdatePrompts() {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤...')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã
    const prompts = await prisma.prompt.findMany({
      select: {
        id: true,
        title: true,
        content: true,
        filters: true
      }
    })
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${prompts.length} –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`)
    
    let updatedCount = 0
    
    for (const prompt of prompts) {
      const newFilters = new Set(prompt.filters || [])
      const textToAnalyze = `${prompt.title} ${prompt.content}`.toLowerCase()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∏–ª—å—Ç—Ä
      for (const [filterName, keywords] of Object.entries(filterKeywords)) {
        const hasKeyword = keywords.some(keyword => 
          textToAnalyze.includes(keyword.toLowerCase())
        )
        
        if (hasKeyword) {
          newFilters.add(filterName)
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const currentFilters = new Set(prompt.filters || [])
      const hasChanges = newFilters.size !== currentFilters.size || 
        [...newFilters].some(filter => !currentFilters.has(filter))
      
      if (hasChanges) {
        await prisma.prompt.update({
          where: { id: prompt.id },
          data: { filters: Array.from(newFilters) }
        })
        
        updatedCount++
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç "${prompt.title.substring(0, 50)}...": ${Array.from(newFilters).join(', ')}`)
      }
    }
    
    console.log(`üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ ${prompts.length}`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeAndUpdatePrompts()
